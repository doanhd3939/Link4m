var background=function(){"use strict";const I=globalThis.browser?.runtime?.id?globalThis.browser:globalThis.chrome;function T(s){return s==null||typeof s=="function"?{main:s}:s}const i=typeof I<"u"?I:typeof chrome<"u"?chrome:null,A=T(()=>{function s(){i.storage.local.get("theme",n=>{const t=(n?.theme||"light")==="dark",h={16:`icons/${t?"dark":"light"}/16.png`,32:`icons/${t?"dark":"light"}/32.png`,48:`icons/${t?"dark":"light"}/48.png`,96:`icons/${t?"dark":"light"}/96.png`,128:`icons/${t?"dark":"light"}/128.png`};i.action.setIcon({path:h})})}i.storage.onChanged.addListener(n=>{n?.theme&&s()});function L(){[{title:"Pick the OCR Type",id:"ocrid"},{title:"Pick the OCR image element",id:"ocrPicker"},{title:"Pick the input element",id:"inputPicker"},{title:"Probot",parentId:"ocrid",id:"prodot"},{title:"Amazon",parentId:"ocrid",id:"amazon"}].forEach(e=>i.contextMenus.create(e))}i.contextMenus.onClicked.addListener(n=>{i.tabs.query({active:!0,currentWindow:!0},e=>{if(e[0]){const t=n.menuItemId==="ocrPicker"?{picker:"ocrPicker"}:n.menuItemId==="inputPicker"?{picker:"inputPicker"}:{menuItemId:n.menuItemId};i.tabs.sendMessage(e[0].id,t)}})});const U={"User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36",Accept:"image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8","Accept-Language":"en-US,en;q=0.9","Sec-Fetch-Mode":"no-cors"};i.runtime.onMessage.addListener((n,e,t)=>{if(n.type==="GET_IMAGE_BASE64"){const{url:o,headers:p={}}=n.payload,a={...U,...p};return fetch(o,{headers:a}).then(l=>l.arrayBuffer()).then(l=>{const m=new Uint8Array(l).reduce((u,d)=>u+String.fromCharCode(d),""),r=`${btoa(m)}`;t({success:!0,data:r})}).catch(l=>{t({success:!1,error:l.message})}),!0}if(n.type==="networkRequest")return C(n.payload,t),!0;if(!n?.action)return;const h=["ReCaptcha_refresh_iframes"].includes(n.action),c=["Invalid apikey","Daily limit exhausted","Insufficient Balance","Wallet limit exhausted"].find(o=>n.action.includes(o));(h||c)&&S(c||n.action)});function C(n,e){const{url:t,method:h,headers:E,body:c,isFormData:o}=n,p=navigator.language||navigator.userLanguage,a=p.split("-")[1]||p;console.log("Browser language:",p);let l;if(new URL(t),a==="DZ"||a==="RU"){const r=new URL(t),u=new URL(t);r.hostname="backup1.nocaptchaai.com",u.hostname="backup2.nocaptchaai.com",l=[r.toString(),u.toString()]}else{const r=new URL(t),u=new URL(t),d=new URL(t);u.hostname="backup1.nocaptchaai.com",d.hostname="backup2.nocaptchaai.com",l=[r.toString(),u.toString(),d.toString()]}return g(l).then(r=>e({success:!0,data:r})).catch(r=>e({success:!1,error:r.message})),!0;function m(r,u,d){const w={method:h,headers:E};if(o){const f=new FormData,b=new Blob([new Uint8Array(c.audio)],{type:"audio/mpeg"});f.append("audio",b,"audio.mp3"),f.append("method",c.method),w.body=f}else w.body=c;fetch(r,w).then(f=>{if(f.ok)return f.json().then(b=>u(b));{const b=f.status;b>=500&&b<600?d(new Error(`Blocked or server error: ${b}`)):d(new Error(`HTTP error: ${b}`))}}).catch(f=>d(f))}function g(r,u=0){return new Promise((d,w)=>{if(u>=r.length){w(new Error("All API endpoints failed"));return}m(r[u],f=>d(f),f=>{console.warn(`Fetch failed for ${r[u]}:`,f.message),g(r,u+1).then(d).catch(w)})})}}function S(n){i.tabs.query({active:!0,currentWindow:!0},e=>{e[0]&&i.tabs.sendMessage(e[0].id,{action:n})})}async function v(){const n=i.runtime.getURL("/defaultConfig.json");let e=null;try{const t=await fetch(n);if(!t.ok)throw new Error(`Failed to load config: ${t.statusText}`);e=await t.json()}catch(t){console.error("Error fetching default config:",t)}return e}i.runtime.onInstalled.addListener(async n=>{L();const e=await v();if(n.reason==="install"&&e&&await i.storage.local.set({settings:e}),n.reason==="update"){let p=function(a,l){a=a.filter(g=>l.includes(g)),l.forEach(g=>{a.includes(g)||a.push(g)});const m=["recaptcha","bls","geetest","mtcaptcha","awswaf","binance","tiktok","prosopo","ocr","lemin","siara"];return a.sort((g,r)=>{const u=m.indexOf(g.toLowerCase()),d=m.indexOf(r.toLowerCase());return u-d}),a};const t=await i.storage.local.get("settings")||{};let h={};try{h=await i.storage.sync.get("settings")}catch(a){console.warn("storage.sync failed, falling back to local",a)}const c=(t?.settings?t:h).settings||{};let o={...e};o.APIKEY=e.APIKEY||c.APIKEY||"",o.ACTIVE=c.ACTIVE??e.ACTIVE,o.theme=c.theme||e.theme,o.enabled=c.enabled??e.enabled,o.logsEnabled=c.logsEnabled??e.logsEnabled,o.local_lang=c.local_lang||e.local_lang,o.captchas=p(c.captchas||[],e.captchas),o.titles=p(c.titles||[],e.titles),o.options={...c.options};for(const a of Object.keys(e.options))o.options[a]?o.options[a]={...e.options[a],...c.options[a]}:o.options[a]=e.options[a];if(Array.isArray(e.forceUpdate))for(const a of e.forceUpdate)for(const[l,m]of Object.entries(a))o.options[l]||(o.options[l]={}),o.options[l]={...o.options[l],...m};await i.storage.local.set({settings:o}),console.log("Extension updated - settings merged successfully")}}),i.runtime.onStartup.addListener(()=>{console.log("Extension started."),s()})});function $(){}function k(s,...L){}const P={debug:(...s)=>k(console.debug,...s),log:(...s)=>k(console.log,...s),warn:(...s)=>k(console.warn,...s),error:(...s)=>k(console.error,...s)};let y;try{y=A.main(),y instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(s){throw P.error("The background crashed on startup!"),s}return y}();
background;importScripts("openPopup.js");
